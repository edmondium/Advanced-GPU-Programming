program main

    use cudafor
    implicit none

    integer, parameter             :: N = 2**22, oneGigaByte = 2**30
    integer                        :: blockDim, gridDim, istat
    real                           :: runtime = 0.0D0, bw
    real(8)                        :: oneSecondInMs = 1000.0
    real, allocatable              :: inputBufferH(:), outputBufferH(:)
    real,allocatable,device        :: inputBufferD(:), outputBufferD(:)
    type (cudaEvent) :: startEvent, endEvent

    istat = cudaSetDevice(0)
    if (istat .ne. 0) print *,"cudaSetDevice returned ",istat

    allocate(inputBufferH(N), outputBufferH(N), inputBufferD(N), outputBufferD(N)) ! Allocate host and device arrays

  istat = cudaEventCreate( startEvent )
  if (istat .ne. 0) print *,"cudaEventCreate returned ",istat
  istat = cudaEventCreate( endEvent )
  if (istat .ne. 0) print *,"cudaEventCreate returned ",istat

 ! start timing
  
    istat = cudaEventRecord ( startEvent, 0)
    if (istat .ne. 0) print *,"cudaEventRecord returned ",istat

! copy input buffer to device and output buffer to host

    inputBufferD = inputBufferH
    outputBufferH = outputBufferD


    istat = cudaEventRecord ( endEvent, 0)
    if (istat .ne. 0) print *,"cudaEventRecord returned ",istat
    istat = cudaEventSynchronize ( endEvent )
    if (istat .ne. 0) print *,"cudaEventSynchronize returned ",istat
    istat = cudaEventElapsedTime ( runtime, startEvent, endEvent );
    if (istat .ne. 0) print *,"cudaEventElapsedTime returned ",istat


    deallocate(inputBufferH, outputBufferH, inputBufferD, outputBufferD)

    bw = N*(storage_size(1.0)/8)*oneSecondInMs / ( oneGigaByte * runtime )
    print *,"Bidirectional Bandwidth ", bw, "(GB/s)" 
    print *, "Elapsed time for data transfers (Ms) = ", runtime
end program main