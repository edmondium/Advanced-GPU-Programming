module mathOps 
 contains


    !TODO: Use proper attribute to indicates that your subroutine is a kernel
    subroutine scale_vector(alpha, a, c)
     implicit none

     real,intent(in)       :: a(:)
     real,intent(out)      :: c(:)

    !TODO: Pass the scalar argument by value
     real,intent(in)       :: alpha  ! pass scalar arguments by value
     integer               :: i, n

     n = size(a) 
     i = blockDim%x*(blockIdx%x-1) + threadIdx%x
     if (i <= n) c(i) = a(i)*alpha
    end subroutine scale_vector
end module mathOps


program main
    use mathOps
    use cudafor
    implicit none

    integer, parameter             :: N = 2048
    integer                        :: blockDim, gridDim, err
    real                           :: alpha = 2.0
    !TODO: Define Unified Memory arrays 
    real,allocatable       :: a(:), c(:) 

    !TODO: Allocate host and device arrays


    a=1.0



    !TODO: Define a 1d thread block of length 256


    gridDim = ceiling(real(N)/blockDim)

    !TODO: Call the kernel and synchronize



    print*,"max_diff=", maxval(c-2.0) 

end program main